//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use serde::Serialize;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, nullable)]
    pub id: i32,
    pub name: String,
    #[sea_orm(nullable)]
    pub name_ar: String,
    pub email: String,
    pub password: String,
    #[sea_orm(nullable)]
    pub image: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: String,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: String,

    #[sea_orm(column_name = "deletedAt", nullable)]
    pub deleted_at: String,
    #[sea_orm(nullable)]
    pub status: bool,
    #[sea_orm(nullable)]
    pub active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::artical::Entity")]
    Artical,
    #[sea_orm(has_many = "super::service::Entity")]
    Service,
}

impl Related<super::artical::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artical.def()
    }
}

impl Related<super::service::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Service.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
